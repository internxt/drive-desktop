# Agreement

## Architecture

```
backend
| core
| infra
    | sqlite
    | drive-server-wip
    | file-system
| features
    | sync
        sync.module.ts
        | debounce-sync
    | backups
    | antivirus
    | notifications
        notifications.module.ts
        | process-notification (sync.debounceSync())
```

## Code

### Use function instead of arrow functions by default

We recommend always creating functions using the `function` keyword because:
- We use the eslint `no-use-before-define` rule and we need to skip checking functions because they are hoisted (we cannot do this with arrow functions).

We only use arrow functions when we want to define a function using a type.

```ts
// bad
const connect = () => {}
// good
function connect() {}
// good
type func = () => void;
const connect: func = () => {}
```

### Use object props instead of multiple props

---

https://github.com/internxt/drive-desktop/issues/545

```ts
// bad
function connect(host: string, port: number) {}
// good
function connect({ host, port }: { host: string; port: number }) {}
// default parameters
function connect({ host, port = 5432 }: { host: string; port?: number }) {}
```

### Use explicit return types in functions just for primitive types

---

- Using return types for primitive types can help in code reviews to check whether, for example, something can be undefined or not.
- Using return types for complex objects introduces the problem of naming elements and maintaining those types, and it also doesn't help in code reviews, since the return type can be anything (it's not a common type).

```ts
// good
function getAccessToken(): Promise<string | undefined> {
  return new Promise((resolve, reject) => {
    resolve('');
  });
}
```

### Stop using event bus

---

We are only going to use events for IPC.

- Events are less type-safe.
- They may follow a different order on each execution.
- It's more difficult to track code execution in the IDE.
- It's not possible to know if an event is being used from the IDE (e.g., references in TypeScript).

### Logger

---

We are going to start open telemetry and store the logs in S3 has a cost. That's why:

- Use logger.debug and logger.warn for anything that shouldn't be stored in S3 (most logs).
- Use logger.info, logger.error, and logger.fatal for a small number of logs (only the most important ones).

### Comments

---

```ts
/**
 * vX.X.X Author
 * Explain why it's done that way, not what it does.
 * We should be able to understand what it does by reading the code, but not why we did it that way; that's the point of the comment.
 * Also, don't delete these comments. The plan is for it to function as an Architecture Decision Record.
 * Whenever we change something, we should retain the comments from the previous version to see the history of the decision.
 */
```
