# Agreement

## Architecture

```
backend
| core
| infra
    | sqlite
    | drive-server-wip
    | file-system
| features
    | sync
        sync.module.ts
        | debounce-sync
    | backups
    | antivirus
    | notifications
        notifications.module.ts
        | process-notification (sync.debounceSync())
```

## Code

### Use function instead of arrow functions by default

We recommend always creating functions using the `function` keyword because:
- We use the eslint `no-use-before-define` rule and we need to skip checking functions because they are hoisted (we cannot do this with arrow functions).

We only use arrow functions when we want to define a function using a type.

```ts
// bad
const connect = () => {}
// good
function connect() {}
// good
type func = () => void;
const connect: func = () => {}
```

### Use object props instead of multiple props

---

https://github.com/internxt/drive-desktop/issues/545

```ts
// bad
function connect(host: string, port: number) {}
// good
function connect({ host, port }: { host: string; port: number }) {}
// default parameters
function connect({ host, port = 5432 }: { host: string; port?: number }) {}
```

### Never use return types if the function infers the type correctly

---

We believe that using return types presents more problems than advantages:
- Naming return types.
- Maintaining return types.

However, using return types has one advantage: if a function is supposed to return a `boolean` value and we forget to add a return value, it will infer an `undefined` value and we might start checking that function's return value using the wrong `undefined`. To solve this, we use the TypeScript rule `noImplicitReturns` to ensure that we don't forget to return a value in all branches of a function and that the function doesn't return `undefined` without explicitly defining it.

```ts
// bad
function getNumber(): number {
  return 8;
}
// good
function getNumber() {
  return 8;
}
```

### Logger

---

We are going to start open telemetry and store the logs in S3 has a cost. That's why:

- Use logger.debug and logger.warn for anything that shouldn't be stored in S3 (most logs).
- Use logger.info, logger.error, and logger.fatal for a small number of logs (only the most important ones).

### Comments

---

```ts
/**
 * vX.X.X Author
 * Explain why it's done that way, not what it does.
 * We should be able to understand what it does by reading the code, but not why we did it that way; that's the point of the comment.
 * Also, don't delete these comments. The plan is for it to function as an Architecture Decision Record.
 * Whenever we change something, we should retain the comments from the previous version to see the history of the decision.
 */
```
