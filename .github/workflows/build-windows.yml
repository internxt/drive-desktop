name: Build Windows

#on:
#  create:
#    tags:
#      - '*'
on:
  workflow_dispatch:

jobs:  
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create .npmrc file
        run: |
          echo "registry=https://registry.yarnpkg.com/" > .npmrc
          echo "@internxt:registry=https://npm.pkg.github.com" >> .npmrc
          # You cannot read packages from other private repos with GITHUB_TOKEN
          # You have to use a PAT instead https://github.com/actions/setup-node/issues/49
          echo //npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN }} >> .npmrc
          echo "always-auth=true" >> .npmrc
      - name: Create .env file
        run: |
          touch .env
          echo "CRYPTO_KEY=${{ secrets.CRYPTO_KEY }}" >> .env
          echo "MAGIC_IV=${{ secrets.MAGIC_IV }}" >> .env
          echo "MAGIC_SALT=${{ secrets.MAGIC_SALT }}" >> .env
          echo "NEW_CRYPTO_KEY=${{ secrets.NEW_CRYPTO_KEY }}" >> .env
          echo "API_URL=https://desktop.internxt.com" >> .env
          echo "NEW_DRIVE_URL=https://api.internxt.com" >> .env
          echo "DRIVE_URL=https://drive.internxt.com" >> .env
          echo "BRIDGE_URL=https://api.internxt.com" >> .env
          echo "APP_SEGMENT_KEY=${{ secrets.APP_SEGMENT_KEY }}" >> .env
          echo "APP_SEGMENT_KEY_TEST=${{ secrets.APP_SEGMENT_KEY_TEST }}" >> .env
          echo "BUG_REPORTING_URL=https://desktop-bug-reporting.inxt.workers.dev" >> .env
          echo "NOTIFICATIONS_URL=https://notifications.internxt.com" >> .env
          echo "LOCK_REFRESH_INTERVAL=20000" >> .env
          echo "PHOTOS_URL=https://photos.internxt.com/api" >> .env
          echo "DRIVE_API_URL=https://drive.internxt.com/api" >> .env
          echo "RUDDERSTACK_KEY=${{ secrets.RUDDERSTACK_KEY }}" >> .env
          echo "RUDDERSTACK_DATA_PLANE_URL=${{ secrets.RUDDERSTACK_DATA_PLANE_URL }}" >> .env
          echo "CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}" >> .env
          echo "CSC_LINK: ./cert.cer" >> .env
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://npm.pkg.github.com'
      - name: Install Chocolatey
        shell: pwsh
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
      - name: Install GraphicsMagick
        run: |
          choco install graphicsmagick -y
      - name: Add GraphicsMagick path
        shell: pwsh
        run: |
          refreshenv
          $env:Path += ";C:\Program Files\GraphicsMagick-1.3.36-Q16"
      - name: Install node
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri https://nodejs.org/dist/v16.14.0/node-v16.14.0-x64.msi -OutFile nodejs.msi
          Start-Process msiexec.exe -Wait -ArgumentList '/I nodejs.msi /quiet /norestart'
#      - name: Install YubiKey
#        shell: pwsh
#        run: |
#          Invoke-WebRequest -Uri "https://developers.yubico.com/yubikey-manager-qt/Releases/yubikey-manager-qt-1.2.5-win64.exe" -OutFile "yubikey-manager-qt-1.2.5-win64.exe"
#          Start-Process .\yubikey-manager-qt-1.2.5-win64.exe -ArgumentList "/S /D=C:\Program Files\Yubico\YubiKey Manager" -Wait
#      - name: Install yubico-piv-tool
#        shell: pwsh
#        run: |
#          choco install yubico-piv-tool -y
#          [Environment]::SetEnvironmentVariable("Path", "$env:Path;C:\Program Files\Yubico\Yubico PIV Tool\bin", "Machine")
#      - name: Checks
#        run: |
#          dir "C:\Program Files\Yubico\Yubico PIV Tool\bin"
#          echo "##[add-to-path]C:\Program Files\Yubico\Yubico PIV Tool\bin"
#      - name: Import key
#        shell: pwsh
#        run: |
#          $env:Path.Split(';')
#          choco list -l yubico-piv-tool
#          & "C:\Program Files\Yubico\Yubico PIV Tool\bin\yubico-piv-tool.exe" -s 9c -a import-certificate -i "$env:CERTIFICATE"
#        env:
#          CERTIFICATE: ${{ secrets.CERTIFICATE_WINDOWS }}

#      - name: Import certificate
#        run: |
#          $certBytes = [System.Convert]::FromBase64String("${{ secrets.CSC_LINK }}")
#          [System.IO.File]::WriteAllBytes("cert.pfx", $certBytes)
#          Import-PfxCertificate -FilePath "cert.pfx" -CertStoreLocation "Cert:\CurrentUser\My" -Password (ConvertTo-SecureString -String ${{ secrets.CSC_KEY_PASSWORD }} -Force -AsPlainText)
#          Get-ChildItem -Path "Cert:\CurrentUser\My"
#          (Get-ChildItem -Path "Cert:\CurrentUser\My\3603EB5C203B2AE1BA9FFC771FCA249BD87AC501").FriendlyName= "Internxt Universal Technologies SL"
#          Get-ChildItem -Path "Cert:\CurrentUser\My\3603EB5C203B2AE1BA9FFC771FCA249BD87AC501"
#      - name: import windows certificate
#        env:
#          WINDOWS_CERTIFICATE: ${{ secrets.CSC_LINK }}
#          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
#        run: |
#          New-Item -ItemType directory -Path certificate
#          Set-Content -Path certificate/tempCert.txt -Value $env:WINDOWS_CERTIFICATE
#          certutil -decode certificate/tempCert.txt certificate/certificate.pfx
#          Remove-Item -path certificate -include tempCert.txt
#          Import-PfxCertificate -FilePath certificate/certificate.pfx -CertStoreLocation Cert:\CurrentUser\My -Password (ConvertTo-SecureString -String $env:WINDOWS_CERTIFICATE_PASSWORD -Force -AsPlainText)
      - name: import windows certificate
        run: |
          echo "${{ secrets.TEST_CERTIFICA_WINDOWS }}" >  cert.cer
          Import-Certificate -FilePath "cert.cer" -CertStoreLocation "Cert:\CurrentUser\My"
          (Get-ChildItem -Path "Cert:\CurrentUser\My\54CB70CC22F8EE7B09E2225D967F5FF7C8A119B6").FriendlyName= "Internxt Universal Technologies SL"
      - name: import windows certificate
        run: |
          cp cert.cer "Internxt Universal Technologies SL"
          cp cert.cer "Internxt Universal Technologies SL.cer"
          cp cert.cer assets/
          cp "Internxt Universal Technologies SL.cer" assets/
          cp "Internxt Universal Technologies SL" assets/
          ls
          ls assets
      - name: Check1 certificate
        run: |
          Get-ChildItem -Path "Cert:\CurrentUser\My\54CB70CC22F8EE7B09E2225D967F5FF7C8A119B6"
      - name: Check2 certificate localmachine
        run: |
          Get-ChildItem -Path Cert:\LocalMachine\My | Where-Object {$_.Subject -like "*Internxt Universal Technologies SL*"}
      - name: Check3 certificate current
        run: |
          Get-ChildItem -Path Cert:\CurrentUser\My | Where-Object {$_.Subject -like "*Internxt Universal Technologies SL*"} 
      - name: Check4 certificate current
        run: |
          Get-ChildItem -Path Cert:\CurrentUser\My\54CB70CC22F8EE7B09E2225D967F5FF7C8A119B6 | Select-Object Subject
      - name: Install yarn and requirements
        run: |  
          npm install --global yarn
          npm install yarn --save-dev
          yarn install --network-timeout 1000000
      - name: Install electron-builder v20
        run: npm install electron-builder@20 --force
      - name: run postinstall
        run: |        
          yarn run postinstall
      - name: Check cert
        run: |    
          Get-ChildItem -Path Cert:\CurrentUser\My | Where-Object {$_.Subject -like "*Internxt Universal Technologies SL*"}
      - name: run ts-node
        run: |    
          yarn run ts-node ./.erb/scripts/clean.js dist
      - name: run npm run build
        run: |    
          npm run build
      - name: Create YAML file
        run: |
          echo 'win:
            target: ["nsis", "msi"]
            publisherName: "*Internxt*"
            signingHashAlgorithms: ["sha256"]
            certificateFile: "cert.cer"' > electron-builder.yml
      - name: run electron-builder build --publish never
        run: |   
          yarn run electron-builder build --win --publish never
#      - name: run electron-builder build --publish never
#        env:
#          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
#          CSC_LINK: ./cert.cer
#        run: |   
#          yarn run electron-builder build --win --publish never -c electron-builder.yml
#          yarn run electron-builder build --win-cert-file=cert.cer --win-cert-password=${{ secrets.CSC_KEY_PASSWORD }} --win-cert-subject-name="CN=*Internxt*" --publish never
#      - name: run electron-builder build --publish never
#        run: |   
#          yarn run electron-builder build --publish never
#          npm exec electron-builder -- --publish always --win

#      - name: run package
#        run: |    
#          npx browserslist@latest --update-db
#          Get-ChildItem -Path Cert:\CurrentUser\My | Where-Object {$_.Subject -like "*Internxt Universal Technologies SL*"}
#          yarn run ts-node ./.erb/scripts/clean.js dist
#          yarn run npm run build
#          yarn run electron-builder build --publish never
#          yarn run package

      - name: Check file 
        run: |
          ls release/build/
