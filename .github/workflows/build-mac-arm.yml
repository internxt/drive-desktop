name: Build Mac ARM

on:
  workflow_dispatch:

jobs:
  build-macos:
    runs-on: macos-arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Create .npmrc file
        run: |
          echo "registry=https://registry.yarnpkg.com/" > .npmrc
          echo "@internxt:registry=https://npm.pkg.github.com" >> .npmrc
          # You cannot read packages from other private repos with GITHUB_TOKEN
          # You have to use a PAT instead https://github.com/actions/setup-node/issues/49
          echo //npm.pkg.github.com/:_authToken=${{ secrets.PERSONAL_ACCESS_TOKEN }} >> .npmrc
          echo "always-auth=true" >> .npmrc
      - name: Create .env file
        run: |
          touch .env
          echo "CRYPTO_KEY=${{ secrets.CRYPTO_KEY }}" >> .env
          echo "MAGIC_IV=${{ secrets.MAGIC_IV }}" >> .env
          echo "MAGIC_SALT=${{ secrets.MAGIC_SALT }}" >> .env
          echo "NEW_CRYPTO_KEY=${{ secrets.NEW_CRYPTO_KEY }}" >> .env
          echo "API_URL=https://desktop.internxt.com" >> .env
          echo "NEW_DRIVE_URL=https://api.internxt.com" >> .env
          echo "DRIVE_URL=https://drive.internxt.com" >> .env
          echo "BRIDGE_URL=https://api.internxt.com" >> .env
          echo "APP_SEGMENT_KEY=${{ secrets.APP_SEGMENT_KEY }}" >> .env
          echo "APP_SEGMENT_KEY_TEST=${{ secrets.APP_SEGMENT_KEY_TEST }}" >> .env
          echo "BUG_REPORTING_URL=https://desktop-bug-reporting.inxt.workers.dev" >> .env
          echo "NOTIFICATIONS_URL=https://notifications.internxt.com" >> .env
          echo "LOCK_REFRESH_INTERVAL=20000" >> .env
          echo "PHOTOS_URL=https://photos.internxt.com/api" >> .env
          echo "DRIVE_API_URL=https://drive.internxt.com/api" >> .env
          echo "RUDDERSTACK_KEY=${{ secrets.RUDDERSTACK_KEY }}" >> .env
          echo "RUDDERSTACK_DATA_PLANE_URL=${{ secrets.RUDDERSTACK_DATA_PLANE_URL }}" >> .env
          echo "APPLE_ID: ${{ secrets.APPLE_ID }}" >> .env
          echo "APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}" >> .env
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.CERT_DEVELOPER_ID_APPLICATION }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      - name: Install graphicsmagick
        run: |
          brew install graphicsmagick
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
      - name: Install Start Run
        run: |
          yarn install
      - name: Publish releases
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          yarn run del-cli ./node_modules/sharp && del-cli ./release/app/node_modules/sharp && cd ./release/app && platform=darwin arch=x64 yarn add sharp && npm rebuild --platform=darwin --arch=arm64 sharp
          yarn run publish
          ls release/build
