import { render, screen, fireEvent, act } from '@testing-library/react';
import '@testing-library/jest-dom';
import { RemoveMalwareState } from './RemoveMalwareState';
import { useAntivirusContext } from '../../../../context/AntivirusContext';

// Mock ResizeObserver
class ResizeObserverMock {
  observe() {
    // Mock implementation
    return null;
  }
  unobserve() {
    // Mock implementation
    return null;
  }
  disconnect() {
    // Mock implementation
    return null;
  }
}

// Add the mock to the global object
global.ResizeObserver = ResizeObserverMock;

jest.mock('../../../../context/LocalContext');

jest.mock('../../../../context/AntivirusContext', () => ({
  useAntivirusContext: jest.fn(),
}));

jest.mock('../../../../utils/path', () => ({
  getExtension: jest.fn().mockReturnValue('txt'),
  getBaseName: jest.fn().mockReturnValue('test.txt'),
}));

describe('RemoveMalwareState', () => {
  const mockInfectedFiles = ['/test/infected1.txt', '/test/infected2.txt'];
  const mockOnRemoveInfectedItems = jest.fn();
  const mockOnScanAgainButtonClicked = jest.fn();
  const mockOnCancel = jest.fn();

  beforeEach(() => {
    jest.clearAllMocks();
    (useAntivirusContext as jest.Mock).mockReturnValue({
      infectedFiles: mockInfectedFiles,
      onRemoveInfectedItems: mockOnRemoveInfectedItems,
      onScanAgainButtonClicked: mockOnScanAgainButtonClicked,
    });
  });

  it('renders with infected files list', () => {
    render(<RemoveMalwareState onCancel={mockOnCancel} />);

    expect(
      screen.getByText('settings.antivirus.filesContainingMalwareModal.title')
    ).toBeInTheDocument();
    expect(
      screen.getByText(
        'settings.antivirus.filesContainingMalwareModal.selectedItems'
      )
    ).toBeInTheDocument();

    mockInfectedFiles.forEach((file) => {
      expect(
        screen.getByText(file.split('\\').pop() as string)
      ).toBeInTheDocument();
    });
  });

  it('handles select all checkbox', () => {
    render(<RemoveMalwareState onCancel={mockOnCancel} />);

    const selectAllCheckbox = screen.getByText(
      'settings.antivirus.filesContainingMalwareModal.selectAll'
    );
    fireEvent.click(selectAllCheckbox);

    const removeButton = screen.getByTestId('remove-malware-button');
    expect(removeButton).not.toBeDisabled();
  });

  it('handles individual item selection', () => {
    render(<RemoveMalwareState onCancel={mockOnCancel} />);

    const firstItemCheckbox = screen.getAllByRole('checkbox')[1]; // First item after select all
    fireEvent.click(firstItemCheckbox);

    const removeButton = screen.getByTestId('remove-malware-button');
    expect(removeButton).not.toBeDisabled();
  });

  it('shows confirmation dialog when remove button is clicked', () => {
    render(<RemoveMalwareState onCancel={mockOnCancel} />);

    const selectAllCheckbox = screen.getByText(
      'settings.antivirus.filesContainingMalwareModal.selectAll'
    );
    fireEvent.click(selectAllCheckbox);

    const removeButton = screen.getByTestId('remove-malware-button');
    fireEvent.click(removeButton);

    expect(
      screen.getByText(
        'settings.antivirus.scanOptions.removeMalware.actionRequired.title'
      )
    ).toBeInTheDocument();
    expect(
      screen.getByText(
        'settings.antivirus.scanOptions.removeMalware.actionRequired.description'
      )
    ).toBeInTheDocument();
  });

  it('calls onRemoveInfectedItems when confirming removal', async () => {
    render(<RemoveMalwareState onCancel={mockOnCancel} />);

    const selectAllCheckbox = screen.getByText(
      'settings.antivirus.filesContainingMalwareModal.selectAll'
    );
    await act(async () => {
      fireEvent.click(selectAllCheckbox);
    });

    const removeButton = screen.getByTestId('remove-malware-button');
    await act(async () => {
      fireEvent.click(removeButton);
    });

    const confirmButton = screen.getByTestId('confirm-remove-button');
    await act(async () => {
      await fireEvent.click(confirmButton);
    });

    expect(mockOnRemoveInfectedItems).toHaveBeenCalledWith(mockInfectedFiles);
  });

  it('calls onCancel when cancel button is clicked', async () => {
    render(<RemoveMalwareState onCancel={mockOnCancel} />);

    const cancelButtons = screen.getAllByText(
      'settings.antivirus.scanOptions.removeMalware.actions.cancel'
    );
    const initialCancelButton = cancelButtons[0];
    await act(async () => {
      fireEvent.click(initialCancelButton);
    });

    expect(
      screen.getByText(
        'settings.antivirus.scanOptions.removeMalware.securityWarning.title'
      )
    ).toBeInTheDocument();

    const confirmCancelButton = screen.getByTestId('confirm-cancel-button');
    await act(async () => {
      fireEvent.click(confirmCancelButton);
    });

    expect(mockOnScanAgainButtonClicked).toHaveBeenCalled();
    expect(mockOnCancel).toHaveBeenCalled();
  });

  it('disables remove button when no items are selected', () => {
    render(<RemoveMalwareState onCancel={mockOnCancel} />);

    const removeButton = screen.getByTestId('remove-malware-button');
    expect(removeButton).toBeDisabled();
  });
});
