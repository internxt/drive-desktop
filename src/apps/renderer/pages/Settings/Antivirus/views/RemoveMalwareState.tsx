import { useEffect, useState } from 'react';
import { useAntivirusContext } from '../../../../context/AntivirusContext';
import { ScrollableContent } from '../../../../components/ScrollableContent';
import Checkbox from '../../../../components/Checkbox';
import { fileIcon } from '../../../../assets/icons/getIcon';
import { getExtension } from '../../../../utils/path';
import Button from '../../../../components/Button';
import { ActionDialog } from '../components/ActionDialog';
import { useTranslationContext } from '../../../../context/LocalContext';

export const RemoveMalwareState = ({ onCancel }: { onCancel: () => void }) => {
  const { translate } = useTranslationContext();
  const { infectedFiles, onRemoveInfectedItems, onScanAgainButtonClicked } = useAntivirusContext();

  const [itemsSelectedToDelete, setItemsSelectedToDelete] = useState<string[]>([]);
  const [currentInfectedFiles, setCurrentInfectedFiles] = useState<string[]>(infectedFiles);
  const [showDeleteInfectedItemsDialog, setShowDeleteInfectedItemsDialog] = useState<boolean>(false);
  const [showCancelActionDialog, setShowCancelActionDialog] = useState<boolean>(false);

  useEffect(() => {
    if (currentInfectedFiles.length === 0) {
      onCancel();
    }
  }, [currentInfectedFiles]);

  const onDeleteItemsButtonClicked = async () => {
    setShowCancelActionDialog(false);
    setShowDeleteInfectedItemsDialog(false);
    console.log({ itemsSelectedToDelete, infectedFiles });
    if (itemsSelectedToDelete.length > 0) {
      await onRemoveInfectedItems(itemsSelectedToDelete);
      setCurrentInfectedFiles((prevInfectedFiles) => prevInfectedFiles.filter((item) => !itemsSelectedToDelete.includes(item)));
    }
    setItemsSelectedToDelete([]);
  };

  const onCancelButtonClicked = () => {
    onScanAgainButtonClicked();
    onCancel();
  };

  return (
    <>
      <div className="flex w-full items-center justify-center">
        <div className="flex h-full max-h-[455px] w-full max-w-[480px] flex-col justify-center gap-8 p-5">
          <div className="flex w-full flex-row justify-between">
            <p>{translate('settings.antivirus.filesContainingMalwareModal.title')}</p>
            <p>
              <p>
                {translate('settings.antivirus.filesContainingMalwareModal.selectedItems', {
                  selectedFiles: itemsSelectedToDelete.length,
                  totalFiles: currentInfectedFiles.length,
                })}
              </p>
            </p>
          </div>
          <div>
            <Checkbox
              checked={itemsSelectedToDelete.length === currentInfectedFiles.length}
              label={translate('settings.antivirus.filesContainingMalwareModal.selectAll')}
              onClick={() => {
                if (itemsSelectedToDelete.length === currentInfectedFiles.length) {
                  setItemsSelectedToDelete([]);
                } else {
                  setItemsSelectedToDelete(currentInfectedFiles);
                }
              }}
            />
          </div>
          <ScrollableContent className="flex h-[285px] w-full max-w-[440px] flex-col gap-3 rounded-lg border border-gray-10 p-5">
            {currentInfectedFiles.map((item: string) => (
              <div className="flex flex-row items-center gap-2">
                <Checkbox
                  checked={itemsSelectedToDelete.includes(item)}
                  label={''}
                  onClick={() => {
                    if (itemsSelectedToDelete.includes(item)) {
                      setItemsSelectedToDelete(itemsSelectedToDelete.filter((itemToDelete) => itemToDelete !== item));
                    } else {
                      setItemsSelectedToDelete((prevState) => [...prevState, item]);
                    }
                  }}
                />
                <div className="flex flex-row items-center gap-1">
                  <div className="flex h-6 w-6">{fileIcon(getExtension(item))}</div>
                  <p className="text-lg text-gray-80">{item.split('\\').pop()}</p>
                </div>
              </div>
            ))}
          </ScrollableContent>
          <div className="flex w-full flex-row items-end justify-end gap-3">
            <Button variant="secondary" onClick={() => setShowCancelActionDialog(true)}>
              {translate('settings.antivirus.scanOptions.removeMalware.actions.cancel')}
            </Button>
            <Button disabled={itemsSelectedToDelete.length === 0} onClick={() => setShowDeleteInfectedItemsDialog(true)}>
              {translate('settings.antivirus.scanOptions.removeMalware.actions.remove')}
            </Button>
          </div>
        </div>
      </div>
      <ActionDialog
        title={translate('settings.antivirus.scanOptions.removeMalware.actionRequired.title')}
        children={
          <div className="flex w-full flex-col gap-1">
            <p className="text-gray-60">{translate('settings.antivirus.scanOptions.removeMalware.actionRequired.description')}</p>
            <p className="text-gray-60">{translate('settings.antivirus.scanOptions.removeMalware.actionRequired.confirmToContinue')}</p>
          </div>
        }
        cancelText={translate('settings.antivirus.scanOptions.removeMalware.actions.cancel')}
        confirmText={translate('settings.antivirus.scanOptions.removeMalware.actions.remove')}
        onCancel={() => setShowDeleteInfectedItemsDialog(false)}
        onConfirm={async () => await onDeleteItemsButtonClicked()}
        showDialog={showDeleteInfectedItemsDialog}
      />
      <ActionDialog
        title={translate('settings.antivirus.scanOptions.removeMalware.securityWarning.title')}
        children={
          <div className="flex w-full flex-col gap-1">
            <p className="text-gray-60">{translate('settings.antivirus.scanOptions.removeMalware.securityWarning.description')}</p>
            <p className="text-gray-60"></p>
          </div>
        }
        cancelText={translate('settings.antivirus.scanOptions.removeMalware.actions.cancel')}
        confirmText={translate('settings.antivirus.scanOptions.removeMalware.actions.remove')}
        confirmButtonVariant="primary"
        onCancel={onCancelButtonClicked}
        onConfirm={() => setShowCancelActionDialog(false)}
        showDialog={showCancelActionDialog}
      />
    </>
  );
};
