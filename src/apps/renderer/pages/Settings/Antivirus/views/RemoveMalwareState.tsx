import { useState } from 'react';
import { useAntivirusContext } from '../../../../context/AntivirusContext';
import { ScrollableContent } from '../../../../components/ScrollableContent';
import Checkbox from '../../../../components/Checkbox';
import { fileIcon } from '../../../../assets/icons/getIcon';
import { getExtension } from '../../../../utils/path';
import Button from '../../../../components/Button';
import { ActionDialog } from '../components/ActionDialog';

export const RemoveMalwareState = ({ onCancel }: { onCancel: () => void }) => {
  const {
    countCorruptedFiles: corruptedFiles,
    onRemoveInfectedItems,
    onScanAgainButtonClicked,
  } = useAntivirusContext();

  const [itemsSelectedToDelete, setItemsSelectedToDelete] = useState<string[]>(
    []
  );
  const [showDeleteInfectedItemsDialog, setShowDeleteInfectedItemsDialog] =
    useState<boolean>(false);
  const [showCancelActionDialog, setShowCancelActionDialog] =
    useState<boolean>(false);

  const onDeleteItemsButtonClicked = () => {
    if (itemsSelectedToDelete.length > 0) {
      onRemoveInfectedItems(itemsSelectedToDelete);
    }
  };

  const onCancelButtonClicked = () => {
    onScanAgainButtonClicked();
    onCancel();
  };

  return (
    <>
      <div className="flex w-full items-center justify-center">
        <div className="flex h-full max-h-[455px] w-full max-w-[480px] flex-col justify-center gap-8 p-5">
          <div className="flex w-full flex-row justify-between">
            <p>Files containing malware</p>
            <p>
              Selected {itemsSelectedToDelete.length} out{' '}
              {corruptedFiles.length}
            </p>
          </div>
          <div>
            <Checkbox
              checked={itemsSelectedToDelete.length === corruptedFiles.length}
              label="Select all"
              onClick={() => {
                if (itemsSelectedToDelete.length === corruptedFiles.length) {
                  setItemsSelectedToDelete([]);
                } else {
                  setItemsSelectedToDelete(corruptedFiles);
                }
              }}
            />
          </div>
          <ScrollableContent className="flex h-[285px] w-full max-w-[440px] flex-col gap-3 rounded-lg border border-gray-10 p-5">
            {corruptedFiles.map((item: string) => (
              <div className="flex flex-row items-center gap-2">
                <Checkbox
                  checked={itemsSelectedToDelete.includes(item)}
                  label={''}
                  onClick={() => {
                    if (itemsSelectedToDelete.includes(item)) {
                      setItemsSelectedToDelete(
                        itemsSelectedToDelete.filter(
                          (itemToDelete) => itemToDelete !== item
                        )
                      );
                    } else {
                      setItemsSelectedToDelete((prevState) => [
                        ...prevState,
                        item,
                      ]);
                    }
                  }}
                />
                <div className="flex flex-row items-center gap-1">
                  <div className="flex h-6 w-6">
                    {fileIcon(getExtension(item))}
                  </div>
                  <p className="text-lg text-gray-80">
                    {item.split('\\').pop()}
                  </p>
                </div>
              </div>
            ))}
          </ScrollableContent>
          <div className="flex w-full flex-row items-end justify-end gap-3">
            <Button
              variant="secondary"
              onClick={() => setShowCancelActionDialog(true)}
            >
              Cancel
            </Button>
            <Button
              disabled={itemsSelectedToDelete.length === 0}
              onClick={() => setShowDeleteInfectedItemsDialog(true)}
            >
              Remove
            </Button>
          </div>
        </div>
      </div>
      <ActionDialog
        title="Action required"
        children={
          <div className="flex w-full flex-col gap-1">
            <p className="text-gray-60">
              Removing the malware will also permanently delete the folder from
              your storage to protect your device. This action cannot be undone.
            </p>
            <p className="text-gray-60">Please confirm to continue.</p>
          </div>
        }
        cancelText="Cancel"
        confirmText="Remove"
        onCancel={() => setShowDeleteInfectedItemsDialog(false)}
        onConfirm={onDeleteItemsButtonClicked}
        showDialog={showDeleteInfectedItemsDialog}
      />
      <ActionDialog
        title="Security warning"
        children={
          <div className="flex w-full flex-col gap-1">
            <p className="text-gray-60">
              Malware is still present, and your device is at risk.
            </p>
            <p className="text-gray-60">Are you sure you want to cancel?</p>
          </div>
        }
        cancelText="Cancel"
        confirmText="Remove"
        confirmButtonVariant="primary"
        onCancel={onCancelButtonClicked}
        onConfirm={() => setShowCancelActionDialog(false)}
        showDialog={showCancelActionDialog}
      />
    </>
  );
};
