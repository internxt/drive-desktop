import { Fragment, ReactNode, useState } from 'react';
import { useAntivirusContext } from '../../../../context/AntivirusContext';
import { ScrollableContent } from '../../../../components/ScrollableContent';
import Checkbox from '../../../../components/Checkbox';
import { fileIcon } from '../../../../assets/icons/getIcon';
import { getExtension } from '../../../../utils/path';
import Button from '../../../../components/Button';
import { Dialog, Transition } from '@headlessui/react';

const ActionDialog = ({
  showDialog,
  title,
  children,
  cancelText,
  confirmText,
  confirmButtonVariant,
  onCancel,
  onConfirm,
}: {
  showDialog: boolean;
  title: string;
  children: ReactNode;
  cancelText: string;
  confirmText: string;
  confirmButtonVariant?: 'danger' | 'primary' | 'secondary' | undefined;
  onCancel: () => void;
  onConfirm: () => void;
}) => (
  <Transition appear show={showDialog} as={Fragment}>
    <Dialog
      as="div"
      className="fixed inset-0 z-10 overflow-y-auto"
      onClose={() => {
        //
      }}
    >
      <div className="min-h-screen px-4 text-center">
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-200"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-100"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <Dialog.Overlay className="fixed inset-0 bg-black/30" />
        </Transition.Child>

        {/* This element is to trick the browser into centering the modal contents. */}
        <span className="inline-block h-screen align-middle" aria-hidden="true">
          &#8203;
        </span>
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-300"
          enterFrom="opacity-0 scale-95"
          enterTo="opacity-100 scale-100"
          leave="ease-in duration-200"
          leaveFrom="opacity-100 scale-100"
          leaveTo="opacity-0 scale-95"
        >
          <div
            style={{ width: '340px' }}
            className="my-8 inline-block transform overflow-hidden rounded-2xl bg-surface p-4 text-left align-middle shadow transition-all"
          >
            <Dialog.Title
              as="h3"
              className="text-neutral-700 mb-3 text-lg font-medium leading-6"
            >
              {title}
            </Dialog.Title>
            <div className="flex w-full flex-col gap-3">
              <div className="">{children}</div>
              <div className="flex flex-row items-center gap-4">
                <Button
                  className="w-full"
                  variant="secondary"
                  onClick={onCancel}
                >
                  {cancelText}
                </Button>
                <Button
                  className="w-full"
                  variant={confirmButtonVariant ?? 'danger'}
                  onClick={onConfirm}
                >
                  {confirmText}
                </Button>
              </div>
            </div>
          </div>
        </Transition.Child>
      </div>
    </Dialog>
  </Transition>
);

export const RemoveMalwareState = ({ onCancel }: { onCancel: () => void }) => {
  const { scannedItems, onRemoveInfectedItems, onScanAgainButtonClicked } =
    useAntivirusContext();
  const infectedItems = scannedItems
    .filter((item) => item.isInfected || item.viruses.length > 0)
    .map((infectedItem) => infectedItem.file);
  const [itemsSelectedToDelete, setItemsSelectedToDelete] = useState<string[]>(
    []
  );
  const [showDeleteInfectedItemsDialog, setShowDeleteInfectedItemsDialog] =
    useState<boolean>(false);
  const [showCancelActionDialog, setShowCancelActionDialog] =
    useState<boolean>(false);

  const onDeleteItemsButtonClicked = () => {
    if (itemsSelectedToDelete.length > 0) {
      onRemoveInfectedItems(itemsSelectedToDelete);
    }
  };

  const onCancelButtonClicked = () => {
    onScanAgainButtonClicked();
    onCancel();
  };

  return (
    <>
      <div className="flex w-full items-center justify-center">
        <div className="flex h-full max-h-[455px] w-full max-w-[480px] flex-col justify-center gap-8 p-5">
          <div className="flex w-full flex-row justify-between">
            <p>Files containing malware</p>
            <p>
              Selected {itemsSelectedToDelete.length} out {infectedItems.length}
            </p>
          </div>
          <div>
            <Checkbox
              checked={itemsSelectedToDelete.length === infectedItems.length}
              label="Select all"
              onClick={() => {
                if (itemsSelectedToDelete.length === infectedItems.length) {
                  setItemsSelectedToDelete([]);
                } else {
                  setItemsSelectedToDelete(infectedItems);
                }
              }}
            />
          </div>
          <ScrollableContent className="flex h-[285px] w-full max-w-[440px] flex-col gap-3 rounded-lg border border-gray-10 p-5">
            {infectedItems.map((item) => (
              <div className="flex flex-row items-center gap-2">
                <Checkbox
                  checked={itemsSelectedToDelete.includes(item)}
                  label={''}
                  onClick={() => {
                    if (itemsSelectedToDelete.includes(item)) {
                      setItemsSelectedToDelete(
                        itemsSelectedToDelete.filter(
                          (itemToDelete) => itemToDelete !== item
                        )
                      );
                    } else {
                      setItemsSelectedToDelete((prevState) => [
                        ...prevState,
                        item,
                      ]);
                    }
                  }}
                />
                <div className="flex flex-row items-center gap-1">
                  <div className="flex h-6 w-6">
                    {fileIcon(getExtension(item))}
                  </div>
                  <p className="text-lg text-gray-80">
                    {item.split('\\').pop()}
                  </p>
                </div>
              </div>
            ))}
          </ScrollableContent>
          <div className="flex w-full flex-row items-end justify-end gap-3">
            <Button
              variant="secondary"
              onClick={() => setShowCancelActionDialog(true)}
            >
              Cancel
            </Button>
            <Button
              disabled={itemsSelectedToDelete.length === 0}
              onClick={() => setShowDeleteInfectedItemsDialog(true)}
            >
              Remove
            </Button>
          </div>
        </div>
      </div>
      <ActionDialog
        title="Action required"
        children={
          <div className="flex w-full flex-col gap-1">
            <p className="text-gray-60">
              Removing the malware will also permanently delete the folder from
              your storage to protect your device. This action cannot be undone.
            </p>
            <p className="text-gray-60">Please confirm to continue.</p>
          </div>
        }
        cancelText="Cancel"
        confirmText="Remove"
        onCancel={() => setShowDeleteInfectedItemsDialog(false)}
        onConfirm={onDeleteItemsButtonClicked}
        showDialog={showDeleteInfectedItemsDialog}
      />
      <ActionDialog
        title="Security warning"
        children={
          <div className="flex w-full flex-col gap-1">
            <p className="text-gray-60">
              Malware is still present, and your device is at risk.
            </p>
            <p className="text-gray-60">Are you sure you want to cancel?</p>
          </div>
        }
        cancelText="Cancel"
        confirmText="Remove"
        confirmButtonVariant="primary"
        onCancel={onCancelButtonClicked}
        onConfirm={() => setShowCancelActionDialog(false)}
        showDialog={showCancelActionDialog}
      />
    </>
  );
};
